buildscript {
    ext {
        springBootVersion = '1.2.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath("io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'spring-boot' 


jar {
    baseName = 'demo'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

compileGroovy {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

[compileGroovy, compileTestGroovy]*.options*.encoding = 'UTF-8'
[compileGroovy, compileTestGroovy]*.groovyOptions*.encoding = 'UTF-8'

sourceSets {
    test.groovy.srcDirs = ['src/test/groovy']

    main.output.resourcesDir = sourceSets.main.output.classesDir
    test.output.resourcesDir = sourceSets.test.output.classesDir
}

repositories {
    mavenCentral()
}


dependencies {
    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile('org.springframework.boot:spring-boot-starter-data-jpa') {
        exclude module: 'tomcat-jdbc'
    }
    compile("commons-dbcp:commons-dbcp:1.4")
    compile 'org.slf4j:slf4j-simple:1.6.6'

    compile 'com.mysema.querydsl:querydsl-jpa:3.6.0'
    compile 'com.mysema.querydsl:querydsl-apt:3.6.0'




    testCompile("com.h2database:h2")
    //___testCompile___
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.dbunit:dbunit:2.4.9'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'com.jayway.jsonpath:json-path:1.2.0'
    testCompile 'org.codehaus.groovy:groovy-all:2.4.1'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'org.spockframework:spock-spring:1.0-groovy-2.4'
    testCompile 'cglib:cglib-nodep:2.2.2'
    testCompile 'org.flywaydb.flyway-test-extensions:flyway-dbunit-spring4-test:3.2.1'
    testCompile 'org.flywaydb.flyway-test-extensions:flyway-spring4-test:3.2.1'

}

configurations {
    all*.exclude module : 'spring-boot-starter-logging'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}


sourceSets {
    generated {
        java {
            srcDirs = ['src/main/querydsl']
        }
    }
}

task generateQueryDSL(type: JavaCompile, group: 'build') {
    source = sourceSets.main.java
    classpath = configurations.compile
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
    dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}
compileGeneratedJava {
    dependsOn generateQueryDSL
    options.warnings = false
    classpath += sourceSets.main.runtimeClasspath
}

clean {
    delete sourceSets.generated.java.srcDirs
}

idea {
    module {
        sourceDirs += file('src/main/querydsl')
    }
}